var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "state", function () {
  return state;
});
_parcelHelpers.export(exports, "loadForecastByCoords", function () {
  return loadForecastByCoords;
});
_parcelHelpers.export(exports, "loadForecast", function () {
  return loadForecast;
});
_parcelHelpers.export(exports, "loadHourResults", function () {
  return loadHourResults;
});
_parcelHelpers.export(exports, "createCurrentObj", function () {
  return createCurrentObj;
});
var _configJs = require("./config.js");
var _helpersJs = require("./helpers.js");
const state = {
  city: {},
  list: [],
  forecast: {
    days: [],
    hourly: [],
    current: {}
  }
};
const loadForecastByCoords = async function (lat, lng) {
  try {
    const data = await _helpersJs.getJSON(`${_configJs.API_FORECAST}lat=${lat}&lon=${lng}&units=metric&appid=${_configJs.API_KEY}`);
    const {city} = data;
    state.city = city;
    state.forecast.days = [];
    state.list = data.list;
    for (let i = 0; i < data.list.length; i += 8) {
      state.forecast.days.push({
        main: data.list[i].main,
        dt: data.list[i].dt,
        dt_txt: data.list[i].dt_txt,
        weather: data.list[i].weather[0]
      });
    }
    loadHourResults(state.forecast.days[0].dt_txt.split(" ")[0]);
    createCurrentObj(state.forecast.days[0].dt_txt.split(" ")[0]);
  } catch (err) {
    console.error(`${err} !!!`);
    throw err;
  }
};
const loadForecast = async function (place) {
  try {
    const data = await _helpersJs.getJSON(`${_configJs.API_FORECAST}q=${place}&units=metric&appid=${_configJs.API_KEY}`);
    const {city} = data;
    state.city = city;
    state.forecast.days = [];
    state.list = data.list;
    for (let i = 0; i < data.list.length; i += 8) {
      state.forecast.days.push({
        main: data.list[i].main,
        dt: data.list[i].dt,
        dt_txt: data.list[i].dt_txt,
        weather: data.list[i].weather[0]
      });
    }
    loadHourResults(state.forecast.days[0].dt_txt.split(" ")[0]);
    createCurrentObj(state.forecast.days[0].dt_txt.split(" ")[0]);
  } catch (err) {
    console.error(`${err} !!!`);
    throw err;
  }
};
const loadHourResults = function (date) {
  state.forecast.hourly = state.list.filter(weather => {
    if (weather.dt_txt.split(" ")[0] === date) {
      return weather;
    }
  });
};
const createCurrentObj = function (date) {
  state.forecast.current = state.forecast.days.filter(day => {
    if (day.dt_txt.split(" ")[0] === date) {
      return day;
    }
  });
  state.forecast.current[0].name = state.city.name;
};
