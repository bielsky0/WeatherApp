var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "state", function () {
  return state;
});
_parcelHelpers.export(exports, "loadForecast", function () {
  return loadForecast;
});
require("regenerator-runtime");
var _configJs = require("./config.js");
var _helpersJs = require("./helpers.js");
const state = {
  forecast: {
    city: {},
    days: [],
    current: {}
  },
  hourly: {}
};
const loadForecast = async function (place) {
  try {
    const data = await _helpersJs.getJSON(`${_configJs.API_FORECAST}q=${place}&appid=${_configJs.API_KEY}`);
    const {city} = data;
    state.forecast.city = city;
    state.forecast.days = state.forecast.current = createCurrentObject(data);
    console.log(state.forecast.days);
    console.log(state.forecast.current);
    state.hourly = data.list.slice(0, 8);
    console.log(state.hourly);
  } catch (err) {
    console.error(`${err} !!!`);
    throw err;
  }
};
const createCurrentObject = function (data) {
  const {list} = data;
  return {
    main: list[0].main,
    weather: list[0].weather[0]
  };
};
const createDayObject = function (data) {
  const {list} = data;
  return list.reduce((acc, curr) => {
    let date = curr.dt_txt.split(" ")[0];
    if (!acc[date]) acc[date] = [];
    acc[date].push({
      main: curr.weather[0].main,
      desc: curr.weather[0].description,
      icon: curr.weather[0].icon,
      temp: curr.main,
      dateTime: new Date(curr.dt_txt)
    });
    return acc;
  }, []);
};
