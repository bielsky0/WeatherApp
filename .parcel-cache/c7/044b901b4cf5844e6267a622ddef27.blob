var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "state", function () {
  return state;
});
_parcelHelpers.export(exports, "loadForecastByCoords", function () {
  return loadForecastByCoords;
});
_parcelHelpers.export(exports, "loadForecast", function () {
  return loadForecast;
});
_parcelHelpers.export(exports, "loadCurrnetWeather", function () {
  return loadCurrnetWeather;
});
_parcelHelpers.export(exports, "loadCurrentWeatherByCoords", function () {
  return loadCurrentWeatherByCoords;
});
_parcelHelpers.export(exports, "loadHourResults", function () {
  return loadHourResults;
});
_parcelHelpers.export(exports, "getHourResult", function () {
  return getHourResult;
});
require("regenerator-runtime");
var _configJs = require("./config.js");
var _helpersJs = require("./helpers.js");
const state = {
  forecast: {
    city: {},
    days: [],
    current: {}
  },
  hourly: [],
  day: 1
};
const loadForecastByCoords = async function (lat, lng) {
  try {
    const data = await _helpersJs.getJSON(`${_configJs.API_FORECAST}lat=${lat}&lon=${lng}&units=metric&appid=${_configJs.API_KEY}`);
    const {city} = data;
    state.forecast.city = city;
    state.forecast.list = data.list;
    state.forecast.days = [];
    for (let i = 0; i < data.list.length; i += 8) {
      state.forecast.days.push({
        main: data.list[i].main,
        dt: data.list[i].dt,
        dt_txt: data.list[i].dt_txt,
        weather: data.list[i].weather[0]
      });
    }
  } catch (err) {
    console.error(`${err} !!!`);
    throw err;
  }
};
const loadForecast = async function (place) {
  try {
    const data = await _helpersJs.getJSON(`${_configJs.API_FORECAST}q=${place}&units=metric&appid=${_configJs.API_KEY}`);
    const {city} = data;
    state.forecast.city = city;
    state.forecast.list = data.list;
    state.forecast.days = [];
    for (let i = 0; i < data.list.length; i += 8) {
      state.forecast.days.push({
        main: data.list[i].main,
        dt: data.list[i].dt,
        dt_txt: data.list[i].dt_txt,
        weather: data.list[i].weather[0]
      });
    }
    console.log(state.forecast.days);
    console.log(createCurrentObject(state.forecast.list[0]));
    console.log(state.hourly);
  } catch (err) {
    console.error(`${err} !!!`);
    throw err;
  }
};
const loadCurrnetWeather = async function (place) {
  try {
    const data = await _helpersJs.getJSON(`${_configJs.API_WEATHER}q=${place}&units=metric&appid=${_configJs.API_KEY}`);
    state.forecast.current = createCurrentObject(data);
  } catch (err) {
    console.error(`${err} !!!`);
    throw err;
  }
};
const loadCurrentWeatherByCoords = async function (lat, lng) {
  try {
    const data = await _helpersJs.getJSON(`${_configJs.API_WEATHER}lat=${lat}&lon=${lng}&units=metric&appid=${_configJs.API_KEY}`);
    state.forecast.current = createCurrentObject(data);
  } catch (err) {
    console.error(`${err} !!!`);
    throw err;
  }
};
const loadHourResults = function (date) {
  state.hourly = state.forecast.list.filter(weather => {
    if (weather.dt_txt.split(" ")[0] === date) {
      return weather;
    }
  });
};
const getHourResult = function (day = state.day) {
  state.day = day;
  const start = (day - 1) * 8;
  const end = day * 8;
  return state.forecast.list.slice(start, end);
};
const createCurrentObject = function (data) {
  return {
    main: data.main,
    weather: data.weather[0],
    coords: data.coord,
    name: data.name,
    dt: data.dt
  };
};
